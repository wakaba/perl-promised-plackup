=head1 NAME

Test::AnyEvent::plackup - Starting HTTP server by |plackup| command for tests

=head1 SYNOPSIS

  use Test::AnyEvent::plackup;
  
  $server = Test::AnyEvent::plackup->new;
  $server->app('path/to/server.psgi');
  $server->server('Starlet');
  
  ($start_cv, $stop_cv) = $server->start_server;
  
  $start_cv->cb(sub {
      warn "Started";
      $url = 'http://localhost:' . $server->port . '/';
      ... get $url;
      $server->stop_server;
  });
  
  $stop_cv->cb(sub {
      warn "Stopped";
  });

=head1 DESCRIPTION

The C<Test::AnyEvent::plackup> module invokes the C<plackup> command
of L<Plack> with specified options.  It might be useful for testing
your PSGI Web applications, or applications that requires access to
some Web applications.

=head1 METHODS

The module exposes following methods:

=over 4

=item $server = Test::AnyEvent::plackup->new

Create a new instance of the class.

=item $server->perl($path)

Set the path to the C<perl> command to invoke.  If none of C<perl> and
C<perl_inc> is explicitly specified, the C<plackup> command is
directly invoked.

=item $server->perl_inc([$path1, $path2, ...])

Set the array reference containing the paths used as additional
C<@INC> paths (by specifying the C<-I> option to the C<perl> command).
Default is the empty array referece.

=item $server->perl_options([OPTIONS...]);

Set the array reference containing additional options to the C<perl>
command.  Default is the empty array reference.

=item $server->plackup($path)

Set the path to the C<plackup> command to invoke.  Default is
C<plackup> (without path, i.e. search from C<PATH>).

=item $server->app($path)

Set the path to the PSGI application file.  It is used as the value of
the C<--app> option to the C<plackup> command.  Nothing by default.

=item $server->set_app_code($code_as_string)

Set the Perl script code used as PSGI application.  The code must be
passed as a character string.  It is written into a temporary file and
then passed to the C<plackup> command.

=item $server->server($server_module)

Set the server module used by the C<plackup> command.  It is
equivalent to specifying the C<--server> option to the C<plackup>
command.

=item $port = $server->port

=item $server->port($port)

Get or set the port the C<plackup>'s server should listen.  If it is
not specified by the application, a random unused ephemeral port is
assigned by the module.

=item $server->set_option(NAME => VALUE)

Set the command-line option to the C<plackup> command to the specified
value.  Any previously specified value for the option is removed.

=item $server->set_option(NAME => VALUE)

Add the command-line option to the C<plackup> command with the
specified value.  Any previously specified value for the option
remains unchanged.  Order between options with same names are
preserved.

=item $server->set_env(NAME => VALUE)

Set the environment variable with specified name and value.  Any
existing variable with same name is overridden.  If the value is
C<undef>, the variable is unset.

By default, the currently set environent variables (i.e. C<%ENV>) are
used.

=item $server->onstdout($code)

Specify the callback function that is invoked when a chunk is received
from the standard output of the C<plackup> command.  The callback is
invoked with an argument, which is the received chunk, or C<undef> for
end of stream.  The callback is not expected to throw any exception.
It must be specified before invocation of the C<start_server> method.
By default, the standard output of the C<plackup> command is connected
to the C<STDOUT>.

=item $server->onstderr($code)

Specify the callback function that is invoked when a chunk is received
from the standard error output of the C<plackup> command.  The
callback is invoked with an argument, which is the received chunk, or
C<undef> for end of stream.  The callback is not expected to throw any
exception.  It must be specified before invocation of the
C<start_server> method.  By default, the standard error output of the
C<plackup> command is connected to the C<STDERR>.

=item $pid = $server->pid

Return the process ID of the C<plackup> process.  It returns C<undef>
if the command is not executed yet.

=item ($start_cv, $end_cv) = $server->start_server

Run the C<plackup> command with the options.  The method return two
AnyEvent condvars.  The first condvar's callback is invoked when the
server process has been started and the application can connect to the
port.  The second condvar's callback is invoked when the server
process has been stopped.

=item $server->stop_server

Stop the C<plackup> process.  This method must be invoked after the
C<start_server> method invocation.

=back

=head1 DEPENDENCY

The module requires Perl 5.8 or later, as well as L<Plack> and
L<AnyEvent>.

=head1 DEVELOPMENT

Latest version of the module is available at the GitHub repository:
<https://github.com/wakaba/perl-test-anyevent-plackup>.

The module is tested at Travis CI:
<http://travis-ci.org/wakaba/perl-test-anyevent-plackup>.

Tarball for the module is available at
<http://wakaba.github.com/packages/perl/#Test-AnyEvent-plackup> but it
is likely outdated.  Use of GitHub version is always recommended.

=head1 SEE ALSO

L<Plack>, L<AnyEvent>.

The <https://github.com/wakaba/perl-test-anyevent-servers> repository
contain the module showing how to combine this module with test
modules for other kinds of servers such as MySQL server.

=head1 AUTHORS

Wakaba <wakabatan@hatena.ne.jp>.

motemen.

=head1 ACKNOWLEDGEMENTS

Part of this module derived from L<Net::TCP::FindPort>
<https://github.com/wakaba/perl-net-tcp-findport>.

=head1 LICENSE

Copyright 2010-2012 Hatena <http://www.hatena.ne.jp/>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
