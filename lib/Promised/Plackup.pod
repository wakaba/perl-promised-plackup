=head1 NAME

Promised::Plackup - Controlling an HTTP server by the |plackup| command

=head1 SYNOPSIS

  use Promised::Plackup;
  
  $server = Promised::Plackup->new;
  $server->set_app_code (q{ return ... });
  $server->server ('Starlet');
  $server->set_option ('--host' => '127.0.0.1');
  
  $server->start->then (sub {
    my $host = $server->get_host;
    GET qq<http://$host/> ...;
  }, sub {
    warn "Server error: |$_[0]|";
  })->then (sub {
    return $server->stop;
  });

=head1 DESCRIPTION

The C<Promised::Plackup> module invokes the C<plackup> command of
L<Plack> with specified options and return a L<Promise> object which
is resolved once the server is ready to accept HTTP requests.  It
might be useful for testing your PSGI Web applications, or
applications that requires access to some Web applications.

=head1 METHODS

The class has following methods:

=over 4

=item $server = Promised::Plackup->new

Create a new instance of the class.

=item $promise = $server->start

Start the C<plackup> command.  The method returns a L<Promise> object,
which is resolved after the server starts to accept HTTP requests.  If
the server does not start accepting connections, the promise is
rejected.

=item $promise = $server->stop

Stop the C<plackup> command.  The method returns a L<Promise> object,
which is resolved after the server is terminated.

Note that this method must be invoked before the references to
C<$server> are discarded.

=item $server->plackup ($path)

Set the path to the C<plackup> command to invoke.  Default is
C<plackup> (without path, i.e. search from C<PATH>).

It can be the real C<plackup> command, or an alternative command
(e.g. wrapper shell script) whose command-line options are compatible
with C<plackup>.

This method must be invoked before the C<start> method is invoked.

=item $server->set_app_code ($code_as_string)

Set the Perl script code used as PSGI application.  The code must be
passed as a character string.  It is equivalent to the C<-e> option to
the C<plackup> command.

This method must be invoked before the C<start> method is invoked.

=item $server->server ($server_module)

Set the server module used by the C<plackup> command, such as
C<Starlet> or C<Twiggy::Prefork>.  It is equivalent to the C<--server>
option to the C<plackup> command.

This method must be invoked before the C<start> method is invoked.

=item $server->set_option (NAME => VALUE)

Set the command-line option to the C<plackup> command to the specified
value.  Any previously specified value for the option is removed.

This method must be invoked before the C<start> method is invoked.

=item $server->set_option (NAME => VALUE)

Add the command-line option to the C<plackup> command with the
specified value.  Any previously specified value for the option
remains unchanged.  Order of option values with same names are
preserved.

This method must be invoked before the C<start> method is invoked.

=item $hashref = $server->envs

Return the environment variables for the C<plackup> command as a
reference to the hash of environment name/value byte string pairs.

If a value is specified in the hash, an environment variable is set.
Otherwise, if an C<undef> value is explicitly specified in the hash,
the environment variable, if any, is unset.  Otherwise, any
environment variable of the main process is left unchanged.  This
method must be invoked before the C<start> method is invoked.

=item $server->stdout (SCALARREF)

=item $server->stdout (CODE)

=item $server->stderr (SCALARREF)

=item $server->stderr (CODE)

Specify how the standard output or the standard error output is
handled.  If a scalar reference is specified, the output is set to the
scalar value.  If a code reference is specified, the code is invoked
with a chunk as the argument whenever the chunk is available, and with
an C<undef> as the argument when the end of the output is reached.

This method must be invoked before the C<start> method is invoked.  If
this method is not invoked, the standard input is left unchanged
(i.e. same as the standard output or the standard error output of the
main process).

=item $time = $server->start_timeout

=item $server->start_timeout ($time)

Get or set the timeout for the C<start>, i.e. the maximum time
interval between the invocation of the C<plackup> command and the
initial acception of an HTTP request by the server.

This method must be invoked before the C<start> method is invoked.

=item $int = $server->get_port

Return the port number the server is listening.  This method must be
invoked after the C<start> promise is resolved.

Unless a port number is explicitly specified by C<<
$server->set_option ('--port' => $port) >>, a random unused port is
assigned.

=item $string = $server->get_hostname

Return the host name the server is listening.  This method must be
invoked after the C<start> promise is resolved.

Unless a port number is explicitly specified, the host name is
defaulted to C<127.0.0.1>.  If a port number is explicitly specified,
the host name should also be explicitly specified.

=item $string = $server->get_host

Return the host name, followed by C<:>, followed by the port the
server is listening.  This method must be invoked after the C<start>
promise is resolved.

=back

=head1 DEPENDENCY

The module requires Perl 5.10 or later.

The module requires L<Promise>
<https://github.com/wakaba/perl-promise>, L<Promised::Command>
<https://github.com/wakaba/perl-promised-command>, and L<AnyEvent>.

The module also requires the C<plackup> command or equivalent,
obviously.

=head1 SEE ALSO

plackup <http://search.cpan.org/dist/Plack/script/plackup>,
<https://github.com/plack/Plack/blob/master/script/plackup>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 ACKNOWLEDGEMENTS

The module derived from L<Test::AnyEvent::plackup>
<https://github.com/wakaba/perl-test-anyevent-plackup>, whose authors
are Wakaba <wakabatan@hatena.ne.jp> and motemen.  Thanks also to
hatz48.

Part of this module derived from L<Net::TCP::FindPort>
<https://github.com/wakaba/perl-net-tcp-findport>.

=head1 LICENSE

Copyright 2010-2012 Hatena <http://www.hatena.ne.jp/>.

Copyright 2015 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
